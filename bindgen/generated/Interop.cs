// Automatically generated by Interoptopus.

#pragma warning disable 0105
using System;
using System.Collections;
using System.Collections.Generic;
using System.Runtime.InteropServices;
using My.Company;
#pragma warning restore 0105

namespace My.Company
{
    public static partial class Interop
    {
        public const string NativeLib = "lib_test";

        static Interop()
        {
        }


        /// Destroys the given instance.
        ///
        /// # Safety
        ///
        /// The passed parameter MUST have been created with the corresponding init function;
        /// passing any other value results in undefined behavior.
        [DllImport(NativeLib, CallingConvention = CallingConvention.Cdecl, EntryPoint = "counter_service_destroy")]
        public static extern FFIError counter_service_destroy(ref IntPtr context);

        public static void counter_service_destroy_checked(ref IntPtr context) {
            var rval = counter_service_destroy(ref context);;
            if (rval != FFIError.Ok)
            {
                throw new InteropException<FFIError>(rval);
            }
        }

        [DllImport(NativeLib, CallingConvention = CallingConvention.Cdecl, EntryPoint = "counter_service_new_with")]
        public static extern FFIError counter_service_new_with(ref IntPtr context, int value, ByteAllocator allocator);

        public static void counter_service_new_with_checked(ref IntPtr context, int value, ByteAllocator allocator) {
            var rval = counter_service_new_with(ref context, value, allocator);;
            if (rval != FFIError.Ok)
            {
                throw new InteropException<FFIError>(rval);
            }
        }

        [DllImport(NativeLib, CallingConvention = CallingConvention.Cdecl, EntryPoint = "counter_service_inc")]
        public static extern int counter_service_inc(IntPtr context);


        [DllImport(NativeLib, CallingConvention = CallingConvention.Cdecl, EntryPoint = "counter_service_dec")]
        public static extern int counter_service_dec(IntPtr context);


        [DllImport(NativeLib, CallingConvention = CallingConvention.Cdecl, EntryPoint = "counter_service_as_string")]
        public static extern IntPtr counter_service_as_string(IntPtr context);


        [DllImport(NativeLib, CallingConvention = CallingConvention.Cdecl, EntryPoint = "counter_service_nested_string")]
        public static extern NestedAsciiPointer counter_service_nested_string(IntPtr context);


        [DllImport(NativeLib, CallingConvention = CallingConvention.Cdecl, EntryPoint = "counter_service_get_data")]
        public static extern void counter_service_get_data(IntPtr context, SliceMutu8 data);

        public static void counter_service_get_data(IntPtr context, byte[] data) {
            var data_pinned = GCHandle.Alloc(data, GCHandleType.Pinned);
            var data_slice = new SliceMutu8(data_pinned, (ulong) data.Length);
            try
            {
                counter_service_get_data(context, data_slice);;
            }
            finally
            {
                data_pinned.Free();
            }
        }

        [DllImport(NativeLib, CallingConvention = CallingConvention.Cdecl, EntryPoint = "counter_service_get_test_data")]
        public static extern SliceMutTest counter_service_get_test_data(IntPtr context, TestAllocator a);


    }

    [Serializable]
    [StructLayout(LayoutKind.Sequential)]
    public partial struct NestedAsciiPointer
    {
        public string msg;
    }

    [Serializable]
    [StructLayout(LayoutKind.Sequential)]
    public partial struct Test
    {
        public int count;
        public SliceMutu8 msg;
    }

    public enum FFIError
    {
        Ok = 0,
        Null = 100,
        Panic = 200,
        Fail = 300,
    }

    [Serializable]
    [StructLayout(LayoutKind.Sequential)]
    public partial struct SliceMutTest
    {
        IntPtr data;
        ulong len;
    }

    public partial struct SliceMutTest : IEnumerable<Test>
    {
        public SliceMutTest(GCHandle handle, ulong count)
        {
            this.data = handle.AddrOfPinnedObject();
            this.len = count;
        }
        public SliceMutTest(IntPtr handle, ulong count)
        {
            this.data = handle;
            this.len = count;
        }
        public Test this[int i]
        {
            get
            {
                if (i >= Count) throw new IndexOutOfRangeException();
                var size = Marshal.SizeOf(typeof(Test));
                var ptr = new IntPtr(data.ToInt64() + i * size);
                return Marshal.PtrToStructure<Test>(ptr);
            }
            set
            {
                if (i >= Count) throw new IndexOutOfRangeException();
                var size = Marshal.SizeOf(typeof(Test));
                var ptr = new IntPtr(data.ToInt64() + i * size);
                Marshal.StructureToPtr<Test>(value, ptr, false);
            }
        }
        public Test[] Copied
        {
            get
            {
                var rval = new Test[len];
                for (var i = 0; i < (int) len; i++) {
                    rval[i] = this[i];
                }
                return rval;
            }
        }
        public int Count => (int) len;
        public IEnumerator<Test> GetEnumerator()
        {
            for (var i = 0; i < (int)len; ++i)
            {
                yield return this[i];
            }
        }
        IEnumerator IEnumerable.GetEnumerator()
        {
            return this.GetEnumerator();
        }
    }


    [Serializable]
    [StructLayout(LayoutKind.Sequential)]
    public partial struct SliceMutu8
    {
        IntPtr data;
        ulong len;
    }

    public partial struct SliceMutu8 : IEnumerable<byte>
    {
        public SliceMutu8(GCHandle handle, ulong count)
        {
            this.data = handle.AddrOfPinnedObject();
            this.len = count;
        }
        public SliceMutu8(IntPtr handle, ulong count)
        {
            this.data = handle;
            this.len = count;
        }
        public byte this[int i]
        {
            get
            {
                if (i >= Count) throw new IndexOutOfRangeException();
                var size = Marshal.SizeOf(typeof(byte));
                var ptr = new IntPtr(data.ToInt64() + i * size);
                return Marshal.PtrToStructure<byte>(ptr);
            }
            set
            {
                if (i >= Count) throw new IndexOutOfRangeException();
                var size = Marshal.SizeOf(typeof(byte));
                var ptr = new IntPtr(data.ToInt64() + i * size);
                Marshal.StructureToPtr<byte>(value, ptr, false);
            }
        }
        public byte[] Copied
        {
            get
            {
                var rval = new byte[len];
                for (var i = 0; i < (int) len; i++) {
                    rval[i] = this[i];
                }
                return rval;
            }
        }
        public int Count => (int) len;
        public IEnumerator<byte> GetEnumerator()
        {
            for (var i = 0; i < (int)len; ++i)
            {
                yield return this[i];
            }
        }
        IEnumerator IEnumerable.GetEnumerator()
        {
            return this.GetEnumerator();
        }
    }


    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    public delegate SliceMutu8 ByteAllocator(uint x0);

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    public delegate SliceMutTest TestAllocator(uint x0);


    public partial class CounterService : IDisposable
    {
        private IntPtr _context;

        private CounterService() {}

        public static CounterService NewWith(int value, ByteAllocator allocator)
        {
            var self = new CounterService();
            var rval = Interop.counter_service_new_with(ref self._context, value, allocator);
            if (rval != FFIError.Ok)
            {
                throw new InteropException<FFIError>(rval);
            }
            return self;
        }

        public void Dispose()
        {
            var rval = Interop.counter_service_destroy(ref _context);
            if (rval != FFIError.Ok)
            {
                throw new InteropException<FFIError>(rval);
            }
        }

        public int Inc()
        {
            return Interop.counter_service_inc(_context);
        }

        public int Dec()
        {
            return Interop.counter_service_dec(_context);
        }

        public string AsString()
        {
            var s = Interop.counter_service_as_string(_context);
            return Marshal.PtrToStringAnsi(s);
        }

        public NestedAsciiPointer NestedString()
        {
            return Interop.counter_service_nested_string(_context);
        }

        public void GetData(SliceMutu8 data)
        {
            Interop.counter_service_get_data(_context, data);
        }

        public void GetData(byte[] data)
        {
            Interop.counter_service_get_data(_context, data);
        }

        public SliceMutTest GetTestData(TestAllocator a)
        {
            return Interop.counter_service_get_test_data(_context, a);
        }

        public IntPtr Context => _context;
    }



    public class InteropException<T> : Exception
    {
        public T Error { get; private set; }

        public InteropException(T error): base($"Something went wrong: {error}")
        {
            Error = error;
        }
    }

}
